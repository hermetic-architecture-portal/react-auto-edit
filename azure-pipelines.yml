# The variables are here to enable testing of the pipeline
variables:
 # set this to another branch when testing prod/master releases
 master_branch: refs/heads/feature/master
 # set this to "prerelease" when testing prod/master releases
 master_tag: latest

trigger:
  branches:
    include:
      - master
      - feature/*
      - bugfix/*
    exclude:
      - azure-pipelines
    
pool:
  vmImage: 'ubuntu-latest'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- checkout: self
  clean: true
  # persistCredentials so we can push tags to the remote repo
  persistCredentials: true

# npmAuthenticate task expects an npmrc file to exist
- script: echo "registry=https://registry.npmjs.org/" > .npmrc
  displayName: "create npmrc"

# npmAuthenticate is being used because the npm publish 
# task doesn't handle tags
- task: npmAuthenticate@0
  inputs:
    workingFile: .npmrc
    customEndpoint: 'npmjs.org'

# for feature/bugfix branches update the package version
# and tag the git repo
- script: |
    git config user.email pipeline@dev.azure.com
    git config user.name build-pipeline
    VERSION=`npm version prerelease --no-git-tag-version --preid=beta`
    while git rev-parse "$VERSION" >/dev/null 2>&1; do
      VERSION=`npm version prerelease --no-git-tag-version --preid=beta`
    done
  displayName: 'increment version'
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], variables.master_branch))

# for master branch tag the git repo for the existing package version
- script: |
    git config user.email pipeline@dev.azure.com
    git config user.name build-pipeline
    VERSION=v`node -p "require('./package.json').version"`
    echo "Version: $VERSION"
    git tag -f $VERSION
  displayName: tag version

- script: |
    npm install
    npm run build
  displayName: 'npm install'

- script: |
   npm run build
  displayName: 'npm build'

- script: |
    npm run test
  displayName: 'npm test'

# for feature/bugfix branches publish with a beta tag
- script: npm publish --tag=beta
  displayName: 'npm publish beta'
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], variables.master_branch))

# for master branch publish with latest tag
- script: npm publish --tag=$MASTER_TAG
  displayName: npm publish $(master_tag)
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], variables.master_branch))

# update tags on remote repo
- script: |
    git push --tags
  displayName: 'push to GitHub'